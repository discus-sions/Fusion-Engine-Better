// this is my own custom one.
// twilight breach server zone
// the mod is on Psych Engine, so this one is like a clone of it but better

var songLength;
var botplayTxt;
var botplaySine = 0;

//nexus

var sicksTxt;
var goodsTxt;
var badsTxt;
var shitsTxt;
var songBreaks = -1;

var shownRatings = [];
var showingRatings = [false, false, false, false];
var currentCombo;
var canDoThat = true;
function start(song) {
	disableScoreChange(true);

	difficTxt.text = 'Nexus Engine Replica UI';

    scoreTxt.x = 0;
    scoreTxt.fieldWidth = FlxG.width;
    scoreTxt.alignment = 'center';
	scoreTxt.borderSize = 1.25;

	//songName.x = 0;
	//songName.fieldWidth = FlxG.width;
	songName.x = 42 + (FlxG.width / 2) - 248;
	songName.fieldWidth = 400;
	songName.alignment = 'center';
	songName.size = 32;
	songName.borderSize = 2;
	if (downscroll) songName.y = FlxG.height - 45;

	var timeBarBG = new FlxSprite(songName.x, songName.y + (songName.height / 4));
	timeBarBG.loadGraphic(hscriptPath + 'timeBar.png');
	timeBarBG.scrollFactor.set();
	timeBarBG.cameras = [camHUD];
	timeBarBG.color = 0xFF000000; //FlxColor.BLACK

	var timeBar = NewBar(timeBarBG.x + 4, timeBarBG.y + 4, Std.int(timeBarBG.width - 8), Std.int(timeBarBG.height - 8), 0, 1, false);
	timeBar.scrollFactor.set();
	timeBar.numDivisions = 800;
	timeBar.cameras = [camHUD];

	songPosBG.visible = false;
	songPosBar.visible = false;
	removeSprite(songName);
	if (useSongBar) {
	    addSprite(timeBarBG);
	    addSprite(timeBar);
	    addSprite(songName);
	}

    sicksTxt = new FlxText(12, FlxG.height - 84, FlxG.width, "Sicks: " + sicks, 20);
	goodsTxt = new FlxText(12, sicksTxt.y - 24,  FlxG.width, "Goods: "+  goods, 20);
	badsTxt = new FlxText(12,  sicksTxt.y - 44,  FlxG.width, "Bads: " +  bads, 20);
	shitsTxt = new FlxText(12, sicksTxt.y - 64,  FlxG.width, "Misses: "+ songMisses, 20);

	sicksTxt.scrollFactor.set();
	sicksTxt.setFormat("VCR OSD Mono", 16, FlxColor.WHITE, LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
	goodsTxt.scrollFactor.set();
	goodsTxt.setFormat("VCR OSD Mono", 16, FlxColor.WHITE, LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
	badsTxt.scrollFactor.set();
	badsTxt.setFormat("VCR OSD Mono", 16, FlxColor.WHITE, LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
	shitsTxt.scrollFactor.set();
	shitsTxt.setFormat("VCR OSD Mono", 16, FlxColor.WHITE, LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    shownRatings.push(sicksTxt);
	shownRatings.push(goodsTxt);
	shownRatings.push(badsTxt);
	shownRatings.push(shitsTxt);
    // NEED HELP! I want to do something where the like stack on top of each other. So if you only got goods, and then 1 sick at the end,
    // the sicks would appear abouve the goods instead of below. -- pls help, im sad :(
	songBreaks = 0;

	botplayTxt = new FlxText(400, timeBarBG.y + 55, FlxG.width - 800, "BOTPLAY", 32);
	if (downscroll) botplayTxt.y = timeBarBG.y - 78;
	botplayTxt.font = "assets/fonts/vcr.ttf";
	botplayTxt.alignment = 'center';
	botplayTxt.borderStyle = songName.borderStyle;
	botplayTxt.borderColor = songName.borderColor;
	botplayTxt.scrollFactor.set();
	botplayTxt.borderSize = 1.25;
	botplayTxt.visible = demoMode;
	botplayTxt.cameras = [camHUD];
	addSprite(botplayTxt);

    sicksTxt.cameras = [camHUD];
	goodsTxt.cameras = [camHUD];
	badsTxt.cameras = [camHUD];
	shitsTxt.cameras = [camHUD];

    addSprite(sicksTxt);
	addSprite(goodsTxt);
	addSprite(badsTxt);
	addSprite(shitsTxt);

	sicksTxt.visible = false;
	goodsTxt.visible = false;
	badsTxt.visible = false;
	shitsTxt.visible = false;
}

function stepHit(step) {
	if (step == 1)
	    songLength = FlxG.sound.music.length;
}

function update(elapsed) {
    if (demoMode)
    {
        if (songScore != 0)
	        scoreTxt.text = 'Score: ' + songScore + ' | Misses: ' + PlayState.misses + (PlayState.misses == 0 ? '(FULL COMBO)' : '') + ' | Rating: ' + GenerateRank(accuracy);
        else 
            scoreTxt.text = '';
    }
	else
    {
        if (songScore != 0)
	        scoreTxt.text = 'Score: ' + songScore + ' | Misses: ' + PlayState.misses + (PlayState.misses == 0 ? '(FULL COMBO)' : '') + ' | Rating: ' + GenerateRank(accuracy) + ' (' + HelperFunctions.truncateFloat(accuracy, 2) + '%)' + getFC();
        else 
            scoreTxt.text = '';
    }

	var curTime = FlxG.sound.music.time;
	if (curTime < 0) curTime = 0;

	var secondsTotal = Math.floor((songLength - curTime) / 1000);
	if (secondsTotal < 0) secondsTotal = 0;

	var minutesRemaining = Math.floor(secondsTotal / 60);
	var secondsRemaining = '' + secondsTotal % 60;
	if (secondsRemaining.length < 2) secondsRemaining = '0' + secondsRemaining; //Dunno how to make it display a zero first in Haxe lol
	songName.text = minutesRemaining + ':' + secondsRemaining;

    if (sicks > 0) 		{sicksTxt.visible = true; sicksTxt.text = 'Sicks: ' + sicks;}
	if (goods > 0) 		{goodsTxt.visible = true; goodsTxt.text = "Goods: "+ goods;}
	if (bads > 0 ) 		{badsTxt.visible = true; badsTxt.text = "Bads: " + bads;}
	if (songBreaks > 0) {shitsTxt.visible = true; shitsTxt.text = "Combo Breaks: "+ songBreaks;}

	if (demoMode) {
		botplaySine += 180 * elapsed;
		botplayTxt.alpha = 1 - Math.sin((Math.PI * botplaySine) / 180);
	}
    if (currentCombo != combo && canDoThat)
    {
        if (currentCombo > combo)
        {
            //this means the player missed.
            songBreaks++;
            //however if the player missed while having the combo 0, this is equal so there are no combo breaks.
        }
    }
}

var scoreTxtTween = false;
function playerOneSing() {
	scoreTxtTween = false;
	scoreTxt.scale.x = 1.1;
	scoreTxt.scale.y = 1.1;
	scoreTxtTween = true;
	new FlxTimer().start(0.025, function(tmr) {
		scoreTxt.scale.x -= 0.0125;
		scoreTxt.scale.y -= 0.0125;

		if (scoreTxt.scale.x > 1 && scoreTxtTween == true) {
			tmr.reset(0.025);
		} else {
			scoreTxt.scale.x = 1;
			scoreTxt.scale.y = 1;
		}
	});
}

function getFC() {
    var ratingFC = '';

    if (PlayState.sicks > 0) ratingFC = "SFC";
    if (PlayState.goods > 0) ratingFC = "GFC";
    if (PlayState.bads > 0 || PlayState.shits > 0) ratingFC = "FC";
    if (PlayState.misses > 0 && PlayState.misses < 10) ratingFC = "SDCB";
    else if (PlayState.misses >= 10) ratingFC = "Clear";

    var daDash = '';
    if (ratingFC != '')
	daDash = ' - ';
    	
    return daDash + ratingFC;
}

function GenerateRank(accuracy) {
	var ranking = "";

	var psychConditions = [
		accuracy >= 100, // Perfect!!
		accuracy >= 90, // Sick!
		accuracy >= 80, // Great
		accuracy >= 70, // Good
		accuracy >= 69, // Nice
		accuracy >= 60, // Meh
		accuracy >= 50, // Bruh
		accuracy >= 40, // Bad
		accuracy >= 20, // Shit
		accuracy >= 0, // You Suck!
	];

	for (i in 0...psychConditions.length)
	{
		var b = psychConditions[i];
		if (b)
		{
			switch (i)
			{
				case 0:
					ranking += "Perfect!!";
				case 1:
					ranking += "Sick!";
				case 2:
					ranking += "Great";
				case 3:
					ranking += "Good";
				case 4:
					ranking += "Nice";
				case 5:
					ranking += "Meh";
				case 6:
					ranking += "Bruh";
				case 7:
					ranking += "Bad";
				case 8:
					ranking += "Shit";
				case 9:
					ranking += "You Suck!";
			}
			break;
		}
	}

	if (demoMode || accuracy == 0)
	    ranking = "N/A";

	return ranking;
}